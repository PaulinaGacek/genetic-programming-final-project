// Przykład 1.2.A - funkcja przystosowania na podstwie ilości outputu i wartości outputu
// populatcja 100
// max-depth 4

Inputs:  [[3, 1], [2, 0], [8, 4], [5, 3], [8, 1], [6, 1], [6, 0], [7, 2], [4, 0], [8, 6], [8, 7], [4, 2], [2, 1], [4, 1], [7, 1], [8, 5], [7, 6], [3, 0], [6, 4], [8, 2], [8, 3], [5, 1], [7, 3], [7, 0], [4, 3], [5, 2], [6, 5], [3, 2], [8, 0], [7, 4], [6, 2], [1, 0], [5, 0]]
Outputs:  [[4], [2], [12], [8], [9], [7], [6], [9], [4], [14], [15], [6], [3], [5], [8], [13], [13], [3], [10], [10], [11], [6], [10], [7], [7], [7], [11], [5], [8], [11], [8], [1], [5]]
Random population generated
Generation 0  ------------------------

Best fitness: -38.0  best indiv:
print(X1/58*83);LOOP(((X3<19)AND(X4!=X4))OR((31==X1)OR(26<X2)))IF(X3>73)X3=83;;X2=56;X2=97;;
Generation 1  ------------------------

Best fitness: -38.0  best indiv:
print(X1/83);LOOP(((X1<19)AND(X4!=X1))OR((31==X1)OR(26<X2)))IF(X3>73)X3=83;;X2=56;X2=X1;;
Generation 2  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X2);
Generation 3  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 4  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 5  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X2);

Generation 6  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 7  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X2);

Generation 8  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 9  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);


Takie same parametry:

Inputs:  [[3, 1], [2, 0], [8, 4], [5, 3], [8, 1], [6, 1], [6, 0], [7, 2], [4, 0], [8, 6], [8, 7], [4, 2], [2, 1], [4, 1], [7, 1], [8, 5], [7, 6], [3, 0], [6, 4], [8, 2], [8, 3], [5, 1], [7, 3], [7, 0], [4, 3], [5, 2], [6, 5], [3, 2], [8, 0], [7, 4], [6, 2], [1, 0], [5, 0]]
Outputs:  [[4], [2], [12], [8], [9], [7], [6], [9], [4], [14], [15], [6], [3], [5], [8], [13], [13], [3], [10], [10], [11], [6], [10], [7], [7], [7], [11], [5], [8], [11], [8], [1], [5]]
Random population generated
Generation 0  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 1  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 2  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 3  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);

Generation 4  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X1);
Generation 5  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X3);
Generation 6  ------------------------

Best fitness: -31.991680541680545  best indiv:
print(X2);

// populacja 1000
Inputs:  [[3, 1], [2, 0], [8, 4], [5, 3], [8, 1], [6, 1], [6, 0], [7, 2], [4, 0], [8, 6], [8, 7], [4, 2], [2, 1], [4, 1], [7, 1], [8, 5], [7, 6], [3, 0], [6, 4], [8, 2], [8, 3], [5, 1], [7, 3], [7, 0], [4, 3], [5, 2], [6, 5], [3, 2], [8, 0], [7, 4], [6, 2], [1, 0], [5, 0]] 
Outputs:  [[4], [2], [12], [8], [9], [7], [6], [9], [4], [14], [15], [6], [3], [5], [8], [13], [13], [3], [10], [10], [11], [6], [10], [7], [7], [7], [11], [5], [8], [11], [8], [1], [5]]
Random population generated
Generation 0  ------------------------

Best fitness: -31.991680541680545  best indiv:
IF(((X1<X3)AND(60>X2))OR((35==X1)OR(X2!=28)))LOOP(64>X3)X2=25;;X1=83;;X1=X1*19*X1;IF(X1!=X2)LOOP(76>41)X3=93;;print(17);;print(X1);
Generation 1  ------------------------

Best fitness: -31.991680541680545  best indiv:
IF(((X1<X3)AND(60>X2))OR((35==X1)OR(X2!=28)))LOOP(64>X3)X2=25;;X1=83;;X1=X1*19*X1;IF(X1!=X2)LOOP(76>41)X3=93;;print(17);;print(X1);

// population 10

(venv) PS C:\Users\pauli\OneDrive\Pulpit\5ty SEM\genetic-programming-vol2> python runGP.py
Inputs:  [[3, 1], [2, 0], [8, 4], [5, 3], [8, 1], [6, 1], [6, 0], [7, 2], [4, 0], [8, 6], [8, 7], [4, 2], [2, 1], [4, 1], [7, 1], [8, 5], [7, 6], [3, 0], [6, 4], [8, 2], [8, 3], [5, 1], [7, 3], [7, 0], [4, 3], [5, 2], [6, 5], [3, 2], [8, 0], [7, 4], [6, 2], [1, 0], [5, 0]]
Outputs:  [[4], [2], [12], [8], [9], [7], [6], [9], [4], [14], [15], [6], [3], [5], [8], [13], [13], [3], [10], [10], [11], [6], [10], [7], [7], [7], [11], [5], [8], [11], [8], [1], [5]]
Final fitness: -22.98336108336109
Final fitness: -3326.991680541681
Final fitness: -821853.2579032077
Final fitness: -6626.9916805416815
Final fitness: -4479.2479131979135
Final fitness: -970.3893495393496
Final fitness: -3615.482528582529
Final fitness: -6600
Final fitness: -561.8236263736264
Final fitness: -3326.991680541681
Random population generated
Generation 0  ------------------------
Final fitness: -6600
Final fitness: -3326.991680541681
Final fitness: -970.3893495393496
Final fitness: -3326.991680541681
Final fitness: -3615.482528582529
Final fitness: -4479.2479131979135
Final fitness: -6626.9916805416815
Final fitness: -22.98336108336109
Final fitness: -3326.991680541681
Final fitness: -3326.991680541681

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)LOOP(83<X2)X1=59;;print(X1);IF(X2>X2)X2=10;;IF(15!=X1)X1=X1;;;X1=input;print(2);LOOP((X1>X1)OR((X2>X3)OR(X1!=20)))X1=88;;
Generation 1  ------------------------
Final fitness: -6626.9916805416815
Final fitness: -22.98336108336109
Final fitness: -6600
Final fitness: -22.98336108336109
Final fitness: -970.3893495393496
Final fitness: -970.3893495393496
Final fitness: -22.98336108336109
Final fitness: -970.3893495393496
Final fitness: -22.98336108336109
Final fitness: -447.66555666555666

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)LOOP(83<X2)X1=59;;print(X1);IF(X2>X2)X2=10;;IF(15!=X1)X1=X1;;;X1=input;print(2);LOOP((X1>X1)OR((X1>X3)OR(X1!=20)))X1=88;;
Generation 2  ------------------------
Final fitness: -4479.2479131979135
Final fitness: -4479.2479131979135
Final fitness: -6600
Final fitness: -6600
Final fitness: -22.98336108336109
Final fitness: -3326.991680541681
Final fitness: -6600
Final fitness: -3326.991680541681
Final fitness: -6600
Final fitness: -970.3893495393496

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)IF(80>X1)X1=54;;;X1=input;print(2);LOOP((X1>X1)OR((X1>X3)OR(X1!=20)))X1=88;;
Generation 3  ------------------------
Final fitness: -4479.2479131979135
Final fitness: -3621.4908480408494
Final fitness: -6626.9916805416815
Final fitness: -22.98336108336109
Final fitness: -6600
Final fitness: -6626.9916805416815
Final fitness: -6600
Final fitness: -3621.4908480408494
Final fitness: -22.98336108336109
Final fitness: -3326.991680541681

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)IF(80>X1)X1=54;;;X1=input;print(2);LOOP((X1>X1)OR((X1>X1)OR(X1!=20)))X1=X1;;
Generation 4  ------------------------
Final fitness: -3326.991680541681
Final fitness: -6626.9916805416815
Final fitness: -3621.4908480408494
Final fitness: -22.98336108336109
Final fitness: -6600
Final fitness: -4479.2479131979135
Final fitness: -22.98336108336109
Final fitness: -6626.9916805416815
Final fitness: -3326.991680541681
Final fitness: -6861.407653457653

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)IF(80>X1)IF((3!=X1)AND(X1!=X1))X1=72;IF(40>X2)X1=X1;;;;;X1=input;print(2);LOOP((X1>X1)OR((X1>X1)OR(X1!=20)))X1=X1;;
Generation 5  ------------------------
Final fitness: -3615.482528582529
Final fitness: -970.3893495393496
Final fitness: -273.4242923742923
Final fitness: -970.3893495393496
Final fitness: -6600
Final fitness: -22.98336108336109
Final fitness: -6600
Final fitness: -3326.991680541681
Final fitness: -6600
Final fitness: -6861.407653457653

Best fitness: -22.98336108336109  best indiv:
IF(46<X1)IF(80>X3)IF((3!=X1)AND(X1!=X1))X1=72;IF(40>X2)X1=X1;;;;;X1=input;print(2);LOOP((X1>X1)OR((X1>X1)OR(X1!=20)))X1=X1;;
Generation 6  ------------------------
Final fitness: -22.98336108336109
Final fitness: -22.98336108336109
Final fitness: -3326.991680541681
Final fitness: -6600
Final fitness: -6861.407653457653
Final fitness: -3326.991680541681
Final fitness: -6600
Final fitness: -3326.991680541681
Final fitness: -22.98336108336109